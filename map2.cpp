/*==============================================================================

   マップ管理 [map.cpp]
	Author :	歐 改造 古市
	Date   :
--------------------------------------------------------------------------------

==============================================================================*/

#include "input.h"
#include "texture.h"
#include "sprite.h"
#include "map2.h"
#include "player.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************


//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************


//*****************************************************************************
// グローバル変数
//*****************************************************************************
// 背景用テクスチャ情報
static int g_Back = 0;

// マップ用テクスチャ情報
static	int g_MapTexture = 0;
MAP		g_map_2;


//マップの当たり判定用データ
int g_map_hitchk_2[MAP_Y][MAP_X] =
{

	{0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0},
	{0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0},
	{0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,0,0,0,0,0,0,1,0,0},
	{0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0},
	{0,1,0,0,0,1,1,1,1,1,0,1,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0},
	{0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0},
	{0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0},
	{0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0},
	{0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
	{0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
	{0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0},
	{0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0},
	{0,1,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0},
	{0,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0},
	{0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0},
	{0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0},
	{0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0},
	{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}



};

//=============================================================================
// 初期化処理
//=============================================================================
void InitMap2(void)
{
	g_Back = LoadTexture("data/TEXTURE/back.jpg");
	g_MapTexture = LoadTexture("data/TEXTURE/MAP02.png");

	// マップUV情報
	g_map_2.u = 0.0f;
	g_map_2.v = 0.0f;
	g_map_2.uh = VIEW_SCREEN_WIDTH / MAP_X;
	g_map_2.vh = VIEW_SCREEN_HEIGHT / MAP_Y;
}

//=============================================================================
// 終了処理
//=============================================================================
void UninitMap2(void)
{

}

//=============================================================================
// 更新処理
//=============================================================================
void UpdateMap2(void)
{
	ChangeUv2();

}

//=============================================================================
// 描画処理
//=============================================================================
void DrawMap2(void)
{

	// 背景
	DrawSpriteLeftTop(g_Back, 0.0f, 0.0f, SCREEN_WIDTH, SCREEN_HEIGHT, 0.0f, 0.0f, 1.0f, 1.0f);

	// マップ描画
	DrawSpriteLeftTop(g_MapTexture,
		0.0f, 0.0f,
		SCREEN_WIDTH, SCREEN_HEIGHT,
		g_map_2.u, g_map_2.v,
		g_map_2.uh, g_map_2.vh);

	// オブジェクト配置を書くならこの辺?

}

void ChangeUv2(void)
{
	float u, v;
	PLAYER* player = GetPlayer();

	u = player->pos.x / (MAP_X * CHIP_SIZE);
	v = player->pos.y / (MAP_Y * CHIP_SIZE);

	// U描画
	if (u < (g_map_2.uh / 2))
	{
		// 0.33fより小さいとき
		g_map_2.u = 0.0f;
		player->difference.x = -(((g_map_2.uh / 2) - u) * (MAP_X * CHIP_SIZE));
	}
	else if (u > (1.0f - (g_map_2.uh / 2)))
	{
		// 0.66fより大きいとき
		g_map_2.u = 1.0f - g_map_2.uh;
		player->difference.x = ((u - (1.0f - g_map_2.uh / 2)) * (MAP_X * CHIP_SIZE));
	}
	else
	{
		// それ以外
		g_map_2.u = u - (g_map_2.uh / 2);
		player->difference.x = 0.0f;
	}

	// V描画
	if (v < (g_map_2.vh / 2))
	{
		// 0.25fより小さいとき
		g_map_2.v = 0.0f;
		player->difference.y = -(((g_map_2.vh / 2) - v) * (MAP_Y * CHIP_SIZE));
	}
	else if (v > (1.0f - (g_map_2.vh / 2)))
	{
		// 0.75fより大きいとき
		g_map_2.v = 1.0f - g_map_2.vh;
		player->difference.y = ((v - (1.0f - g_map_2.vh / 2)) * (MAP_Y * CHIP_SIZE));
	}
	else
	{
		// それ以外
		g_map_2.v = v - (g_map_2.vh / 2);
		player->difference.y = 0.0f;
	}
}

int GetMapEnter(D3DXVECTOR2 pos, D3DXVECTOR2 size)
{
	D3DXVECTOR2 min, max;

	min.x = pos.x - size.x / 2;
	min.y = pos.y - size.y / 2;
	max.x = pos.x + size.x / 2;
	max.y = pos.y + size.y / 2;

	int gx = 0;
	int gy = 0;

	float sx, sy;

	// 横軸
	for (int x = 0; x < MAP_X; x++)
	{
		sx = CHIP_SIZE * x + (size.x / 2);

		if (min.x < sx + CHIP_SIZE && // プレイヤー小、マップ大
			max.x > sx)				  // プレイヤー大、マップ小
		{
			gx = x;
		}
	}

	// 縦軸
	for (int y = 0; y < MAP_Y; y++)
	{
		sy = CHIP_SIZE * y + (size.y / 2);

		if (min.y < sy + CHIP_SIZE && // プレイヤー小、マップ大
			max.y > sy)				  // プレイヤー大、マップ小
		{
			gy = y;
		}
	}

	return g_map_hitchk_2[gy][gx];
}

int GetMap2(int x, int y)
{
	return g_map_hitchk_2[y][x];
}